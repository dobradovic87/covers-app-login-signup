@import "../global/variables.scss";

/**
* This .scss loop will create "margin helpers" and "padding helpers"
* It will generate several classes such as:
* .mr-10 which gives margin-right 10 pixels.
* .pb-5 gives PADDING to the BOTTOM of 5 pixels
* The first letter is "m" or "p" for MARGIN or PADDING
* Second letter is "t", "b", "l", or "r" for TOP, BOTTOM, LEFT, or RIGHT
* Third letter is the number of spacing in pixels.
* Adjust the amounts generated by editing the $spaceamounts variable below.
*/
$spaceamounts: (
  0,
  5,
  10,
  15,
  20,
  25,
  30,
  35,
  40,
  45,
  50,
  55,
  60,
  65,
  70,
  75,
  80,
  85,
  95,
  100,
  110,
  120,
  140,
  150,
  160,
  170,
  180,
  190,
  200,
  220,
  240,
  260,
  280,
  300,
  400
); // Adjust this to include the pixel amounts you need.
$sides: (top, bottom, left, right); // Leave this variable alone
@each $space in $spaceamounts {
  .m-#{$space} {
    margin: #{$space}px !important;
  }
  .p-#{$space} {
    padding: #{$space}px !important;
  }
  @each $side in $sides {
    .m#{str-slice($side, 0, 1)}-#{$space} {
      margin-#{$side}: #{$space}px !important;
    }
    .p#{str-slice($side, 0, 1)}-#{$space} {
      padding-#{$side}: #{$space}px !important;
    }
  }
}

// Font sizes
$sizes: (8, 10, 12, 14, 15, 16, 18, 21, 24, 36, 60);
@each $size in $sizes {
  .font-#{$size} {
    font-size: #{$size}px !important;
  }
}

// Letter spacing
$spaces: (1, 2, 3, 4, 5, 6, 8, 10);
@each $space in $spaces {
  .ls-#{$space} {
    letter-spacing: #{$space}px;
  }
}

// Line height
$spaces: (10, 15, 17, 18, 20, 25, 30, normal);
@each $space in $spaces {
  @if $space == "normal" {
    .lg-#{$space} {
      line-height: normal;
    }
  } @else {
    .lh-#{$space} {
      line-height: #{$space}px;
    }
  }
}

// Font weight
$weights: (400, 500, 600, 700, 800, 900);
@each $weight in $weights {
  .font-#{$weight} {
    font-weight: #{$weight} !important;
  }
}

// Text transform
$transforms: (uppercase, capitalize);
@each $transform in $transforms {
  .text-#{$transform} {
    text-transform: #{$transform};
  }
}
// Text align
$aligns: (right, left, center);
@each $align in $aligns {
  .text-#{$align} {
    text-align: #{$align};
  }
}

// Border: none
.border-none {
  border: none !important;
}

// Border
$positions: (top, bottom, left, right);
$colors: (black, blue, white, transparent);
$none: (none);

@each $color in $colors {
  .border-#{"" + $color} {
    border: 1px solid #{$color};
  }
  @each $position in $positions {
    .border-#{str-slice($position, 0, 1)}-#{"" + $color} {
      border-#{$position}: 1px solid #{$color};
    }
  }
  @each $position in $positions {
    .border-#{str-slice($position, 0, 1)}-#{"" + $none} {
      border-#{$position}: #{$none} !important;
    }
  }
}

//No decoration
.no-decoration {
  text-decoration: none;
  color: inherit;
}

// Cursor-pointer
.pointer {
  cursor: pointer;
}

.no-pointer {
  pointer-events: none;
}

// Word-break
.break-word {
  word-break: break-word;
}

.bg-color {
  background: $color-black;
}

.border-top {
  border-top: thin solid rgb(97, 97, 97);
}
